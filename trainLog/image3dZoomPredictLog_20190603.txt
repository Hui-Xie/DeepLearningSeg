Program ID of Predictive Network training:5103

Program command: 
 ['TrainPredictNet.py', '/home/hxie1/temp_netParameters/OvarianCancer/Predict', '/home/hxie1/data/OvarianCancerCT/Extract_uniform/trainImages_zoom_147_281_281', '/home/hxie1/data/OvarianCancerCT/Extract_uniform/testImages_zoom_147_281_281', '/home/hxie1/data/OvarianCancerCT/Extract_uniform/patientResponseDict.json', 'image3dZoom']

Major program changes: 
                      the nunmber of filters in 1st layer in V model = 96
                      latent Vector size: 1536*51*49 (featureMap* slices * axisPlaneLatentVector)
                      PredictModel is convsDenseModule+FC network.
                      there total 162 patient data, in which, 130 with smaller patientId as training data, 
                                                          and 32 with bigger patientID as test data

Experiment setting for Latent to response:
Input: 1536*51*49 Tensor as latent vector,
       where 1536 is the  number of filter at the bottleneck of V model, 
             51 is the number of slices of ROI CT image with size 51*281*281 for input to V model, 
             49 =7*7 is the flatted feature map for each filter.

Predictive Model: 1,  first 4-layer dense conv block reducing feature space into 768 with tensor size 768*51*49 
                  2,  and 4 dense conv blocks each of which includes a stride 2 conv and 4-layers dense conv block; now the the tensor is with size 48*2*2
                  3,  and a simple conv-batchNorm-Relu layer with filter size(2,2) change the tensor with size of  48*1;
                  4,  and 2 fully connected layers  changes the tensor into size 2*1;
                  5  final a softmax for binary classification;
                  Total network learning parameters are 29 millions.
                  Network architecture is referred at https://github.com/Hui-Xie/OvarianCancer/blob/master/LatentPredictModel.py

Loss Function:   Cross Entropy with weight [3.3, 1.4] for [0,1] class separately, as [0,1] uneven distribution.

Data:            training data has 130 patients, and test data has 32 patients with training/test rate 80/20.

Training strategy:  50% probability of data are mixed up with beta distribution with alpha =0.4, to feed into network for training. 
                    No other data augmentation, and no dropout.
                                                          
                                                         
Experiment setting for Image3d Zoom to response:
Input: 147*281*281 scaled 3D CT raw image as numpy array 
       
others same with Image3d ROI model.


Experiment setting for Image3d ROI to response:
Input: 147*281*281  3D CT raw image ROI as numpy array 
       
Predictive Model: 1,  first 3-layer dense conv block with channel size 24.
                  2,  and 6 dense conv DownBB blocks,  each of which includes a stride 2 conv and 3-layers dense conv block; 
                  3,  and 3 fully connected layers  changes the tensor into size 2*1;
                  4,  final a softmax for binary classification;
                  Total network learning parameters are 236K.
                  Network architecture is referred at https://github.com/Hui-Xie/OvarianCancer/blob/master/Image3dPredictModel.py

Loss Function:   Cross Entropy with weight [3.3, 1.4] for [0,1] class separately, as [0,1] uneven distribution.

Data:            training data has 130 patients, and test data has 32 patients with training/test rate 80/20.

Training strategy:  50% probability of data are mixed up with beta distribution with alpha =0.4, to feed into network for training. 
                    No other data augmentation, and no dropout.  
                    
                    change patience of learningRate scheduler to 30.                                         

            

Program starting Time: 2019-06-03 16:06:29.243880
Info: netPath = /home/hxie1/temp_netParameters/OvarianCancer/Predict

Now program get 130 input files.
Now program get 32 input files.
TrainData Input:  batchSize=4, depth=147, height=281, width=281, NumClassfication=2

TestData Input:  batchSize=4, depth=147, height=281, width=281, NumClassfication=2

Info: the size of bottle neck in the net = 24* (1, 3, 3)

Info: program uses Mixup with alpha=0.4, and mixupProb = 0.5.
Network trains from scratch.
Network has total 236,648 parameters.
Infor: Cross Entropy Weight: [3.3333333333333335, 1.4285714285714286] for label[0, 1]
Info: program will use 4 GPUs.
Loss Functions List: FocalCELoss with weight of 1; 
Hints: Optimal_Result = Yes = 1,  Optimal_Result = No = 0 


Epoch		TrLoss	TrainAccuracy	TsLoss	TestAccuracy
0		0.1724	0.72368		0.1689	0.81250
1		0.1735	0.66071		0.1683	0.81250
2		0.1744	0.59615		0.1703	0.81250
3		0.1729	0.60417		0.1706	0.81250
4		0.1733	0.62500		0.1707	0.81250
5		0.1732	0.71154		0.1699	0.81250
6		0.1726	0.68333		0.1695	0.81250
7		0.1733	0.69737		0.1696	0.81250
8		0.1731	0.62500		0.1702	0.81250
9		0.1727	0.69643		0.1690	0.81250
10		0.1725	0.68750		0.1681	0.81250
11		0.1728	0.72222		0.1683	0.81250
12		0.1732	0.64706		0.1688	0.81250
13		0.1716	0.63333		0.1678	0.81250
14		0.1732	0.69118		0.1669	0.81250
15		0.1722	0.65789		0.1673	0.81250
16		0.1725	0.73529		0.1673	0.81250
17		0.1735	0.61842		0.1653	0.81250
18		0.1739	0.67857		0.1674	0.81250
19		0.1733	0.70833		0.1688	0.81250
20		0.1724	0.77941		0.1686	0.81250
21		0.1728	0.65000		0.1674	0.81250
22		0.1730	0.71591		0.1691	0.81250
23		0.1718	0.58929		0.1665	0.81250
24		0.1736	0.59091		0.1669	0.81250
25		0.1710	0.77941		0.1669	0.81250
26		0.1742	0.64706		0.1683	0.81250
27		0.1725	0.69048		0.1684	0.81250
