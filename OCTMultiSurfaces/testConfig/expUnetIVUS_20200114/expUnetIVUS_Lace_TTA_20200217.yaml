# base IVUS polar image and polar label
# training: 100 patients; validation: 9 patients; test: 326 patients;
# numSurface = 2
# Each image frame is 384 × 384 pixels in size, with in-frame resolution of 0.026 × 0.026 mm.
# polar image with lace with 30, size of 192*420
# Feb 17th: add TTA: Test-Time Augmentation

# Unet with a residual link inside each block + Gaussian Ground truth for multi-surface + KLDivLoss +layerDice + Soft argMax + SmoothL1Loss + IPM
dataDir: "/home/hxie1/data/IVUS/polarNumpy"
# log will save at: dataDir + "/log/" + network + "/" + experimentName
K_Folds: 0
fold_k:  -1   # no cross validation
# training data:  dataDir + training + images_CV{k}.npy
#         label: dataDir + training + surfaces_CV{k}.npy
#         IDs  : dataDir + training + patientID_CV{k}.json

# validation data:  dataDir + validation + images_CV{k}.npy
#           label: dataDir + validation + surfaces_CV{k}.npy
#           IDs  : dataDir + validation + patientID_CV{k}.json

# test data:  dataDir + test + images_CV{k}.npy
#     label: dataDir + test + surfaces_CV{k}.npy
#     IDs  : dataDir + test + patientID_CV{k}.json

# when do not use cross validation:
# training data:  dataDir + training + images.npy
#         label: dataDir + training + surfaces.npy
#         IDs  : dataDir + training + patientID.json

# validation data:  dataDir + validation + images.npy
#           label: dataDir + validation + surfaces.npy
#           IDs  : dataDir + validation + patientID.json

# test data:  dataDir + test + images.npy
#     label: dataDir + test + surfaces.npy
#     IDs  : dataDir + test + patientID.json

groundTruthInteger: False
numSurfaces: 2  # num of surfaces in an image
sigma: 20.0  # For gaussianized  ground truth, in float
device: torch.device('cuda:1')   #GPU ID
batchSize: 20
startFilters: 24  # the num of filters in first layer of Unet

# some physical parameter of images
slicesPerPatient: 1
hPixelSize: 0.026 #Each image frame is 384 × 384 pixels in size, with in-frame resolution of 0.026 × 0.026 mm.
#size_image is 0.026 mm in Volcano Data-set;

# data augmentation
augmentProb: 0.7  #  data augmentation rate
gaussianNoiseStd: 0.1 # gausssian nosie std with mean =0
# for salt-pepper noise
saltPepperRate: 0.05  # rate = (salt+pepper)/allPixels
saltRate: 0.5  # saltRate = salt/(salt+pepper)
rotation: True
lacingWidth: 30  # Lace the both end of 0 or 360 degree to offset inaccurate segementation at boundary of input image
TTA: True       #Test-Time Augmentation
TTA_Degree: 20 # roration degree of TTA, in degree
# data augmentation

network: "IVUSUnet"
netPath: "/home/hxie1/data/IVUS/polarNumpy/netParameters"  # net is saved at netpath / network / self_filename
loadNetPath: "" # reserve for pretrained network.
outputDir: ""

# do not use these loss function
lossFunc0: "nn.KLDivLoss(reduction='batchmean').to(device)"   # the input given is expected to contain log-probabilities
lossFunc0Epochs: 1000   # the epoch number of using lossFunc0
lossFunc1: "nn.SmoothL1Loss().to(device)"
lossFunc1Epochs: 500


# Proximal IPM Optimization
useProxialIPM: False
learningStepIPM: 0.1
maxIterationIPM: 100
criterionIPM: 0.1 # the criterion of average difference of 2 adjacent iterations in IPM: less than this value, IPM exits.

useDynamicProgramming: False
usePrimalDualIPM: True
useLayerDice: True
useCEReplaceKLDiv: False