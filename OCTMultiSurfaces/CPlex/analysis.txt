
Comparison Experiment of IPM and Cplex QP
1  Experiment method:
   In tensor space, random generate a martix H, and then H= HxH^T get a SPD matrix,
   expand SPD matrices H into BxWxNxN dimension and generate related b, A, d,  to produce BxW convex optimization problems:
   S^* = arg min_{S} {0.5*s^T*H*s+b^T*s+c}, such that AS <= d;
   feed these tensors into IPM, directly paralell get its solution;
   and convert these tenser into Cplex's list format, use BxW loop to sequentially get get its Cplex solution;
   record their time respectively;

2  CPlex and IPM have exact same solutions for random generated SPD matrix QP problems, without many times random test;
   Previously, Comparison experiment of backward gradient between manually compuation and our IPM also showed our IPM is correct;
   Our IPM code also verified QP with manually computated solution, which also showed our IPM is correct;
   Conclusion: Our IPM implementation is correct;

3  For B=155, W =512 input context (Consider test set: 31 images/patient x 5 patient = 155 imags):
        IPM spent 3.87 seconds, and CPlex spent 1636.43 seconds;
        For one convex optimization problem, Cplex may spent 0.02 second per QP optimization instance;
        IPM+ GPU automacically batchize them to run;

   For a B=4, W=512 input context (A GPU batch size):
        IPM+GPU run one-time parallel instances,  so IPM spent 0.44s per parallel optimization instance;
        CPlex spent 52 seconds for serial run.


4  Analysis: IPM is slower than CPlex for single instance, but IPM's GPU parallel speeds up hugely;
   Reason: IPM is implemented by python outsidde-layer logic, but inside matrix computation uses GPU's C++ code;
           Cplex uses pure C++ code for all implementation, with only a python feeding interface;

5  Correct my error in Thursday,
   For B =4, W =512 context:
       I used IPM's 5min x 2000 to estimate Cplex test time. It is incorrect as 5 mins include read image file and Unet time which do not need scale up;
       It should use only Cplex one instance time to estimate Cplex total test time: 0.02x4x512 = 41 seconds, which is similar  with above one batch experiment.

6  Further plan for your review:
   A  Use Parallel IPM method to work on Duke data;
   B  






======================================
For B =4, W =512 case
Comparison between IPM and Cplex
IPM running time: 0.4402904510498047 seconds
IPM solution S[0,0]:
 tensor([[-0.0442],
        [-0.0442],
        [-0.0442],
        [-0.0442],
        [-0.0442],
        [-0.0442],
        [-0.0442],
        [-0.0113],
        [-0.0113],
        [ 0.0541],
        [ 0.0541],
        [ 0.0642]], device='cuda:0')
========End of IPM======
Solution status =  1 : optimal
Solution value  =  -0.0509972974651289
Cplex running time: 0.05081439018249512 seconds
Column  0 :   Value =  -0.044202  Reduced Cost =  -0.000000
Column  1 :   Value =  -0.044202  Reduced Cost =  -0.000000
Column  2 :   Value =  -0.044202  Reduced Cost =  -0.000000
Column  3 :   Value =  -0.044202  Reduced Cost =   0.000000
Column  4 :   Value =  -0.044202  Reduced Cost =   0.000000
Column  5 :   Value =  -0.044202  Reduced Cost =   0.000000
Column  6 :   Value =  -0.044202  Reduced Cost =   0.000000
Column  7 :   Value =  -0.011345  Reduced Cost =   0.000000
Column  8 :   Value =  -0.011345  Reduced Cost =   0.000000
Column  9 :   Value =   0.054136  Reduced Cost =  -0.000000
Column  10 :   Value =   0.054136  Reduced Cost =  -0.000000
Column  11 :   Value =   0.064231  Reduced Cost =   0.000000
CPlex running time: 52.48021149635315 seconds
========End of Cplex======
========================================================================


==================================================================
For B = 155, W=512 context:
Comparison between IPM and Cplex
IPM running time: 3.873863935470581 seconds
IPM solution S[0,0]:
 tensor([[-0.0233],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [-0.0231],
        [ 0.1172]], device='cuda:0')
========End of IPM======
Solution status =  1 : optimal
Solution value  =  -0.055633909794741226
Cplex running time: 0.042978525161743164 seconds
Column  0 :   Value =  -0.023104  Reduced Cost =  -0.000000
Column  1 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  2 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  3 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  4 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  5 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  6 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  7 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  8 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  9 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  10 :   Value =  -0.023103  Reduced Cost =   0.000000
Column  11 :   Value =   0.117210  Reduced Cost =  -0.000000
CPlex running time: 1636.4258534908295 seconds
========End of Cplex======
